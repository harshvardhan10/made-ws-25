pipeline Temperature {

    TemperatureExtractor 
        -> TemperatureTextFile
        -> TemperatureCSV
        -> TemperatureCellRangeSelector
        -> TemperatureColumnDeleter
        -> RenameHeaders
        -> TemperatureTableInterpreter
        -> TemperatureTransformer
        -> BatteryTemperatureTransformer
        -> TemperatureLoader;

    block TemperatureExtractor oftype LocalFileExtractor {
        filePath: "./mowesta-dataset-20221107/data.csv";
    }

    block TemperatureTextFile oftype TextFileInterpreter {}

    block TemperatureCSV oftype CSVInterpreter {
        delimiter: ";";
    }

    block TemperatureCellRangeSelector oftype CellRangeSelector {
        select: range A1:L*; 
    }

    block TemperatureColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }

    block RenameHeaders oftype CellWriter {
        at: range A1:F1;
        write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    block TemperatureTableInterpreter oftype TableInterpreter {
        columns: [
            "id" oftype validID,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    block TemperatureTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        uses: CelsiusToFahrenheit;
    }

    block BatteryTemperatureTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        uses: CelsiusToFahrenheit;
    }

    block TemperatureLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;

        Fahrenheit: (Celsius * 9/5) + 32;
    }

}

valuetype validID oftype integer {
    constraints: [
        PositiveInteger
    ];
}

publish constraint PositiveInteger oftype RangeConstraint {
    lowerBound: 0;
    lowerBoundInclusive: false;
}